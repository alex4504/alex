'use strict';
Для добавления кода JavaScript на страницу используется тег <script>

js
1)локальный сервер
опен сервер wamp
по гайду установить.
2)consol.log
3)выражения (арифметические и логические)
4)!переменные!(держится все)
 
5)обьекты и массивы в переменных
6)основные виды объектов:int str arr bool float
7)виды массивов: ассоциативные, массивы списки и т.д.
8)операторы (циклы) if,for, while.
9)рекурсия (функции, как создавать самому и зачем это надо)
10)стандартная библиотека (функции со строками, математические, !с файлами! 

поделючить к html:
<script src="/path/to/script.js"></script>

ctrl+/ делают строку комментарием

неизменяемую переменную, используйте const вместо let
Обратные кавычки: `Привет`.

let name = "Иван";
// Вставим переменную
alert( `Привет, ${name}!` ); // Привет, Иван!

string - cтрока
let string = "hello";

var obj = {};  в обьектах может быть что угодно

number для любых чисел: целочисленных или чисел с плавающей точкой.
string для строк. Строка может содержать один или больше символов, нет отдельного символьного типа.
boolean для true/false.
null для неизвестных значений – отдельный тип, имеющий одно значение null.
undefined для неприсвоенных значений – отдельный тип, имеющий одно значение undefined.
object для более сложных структур данных.
symbol для уникальных идентификаторов.
Оператор typeof позволяет нам увидеть, какой тип данных сохранён в переменной.
Имеет две формы: typeof x или typeof(x).
Возвращает строку с именем типа. Например, "string".
Для null возвращается "object" – это ошибка в языке, на самом деле это не объект.

спросить баннером:
let answer = prompt('есть ли вам 18?','да');

в коде нужно делть одну и ту же функция( набор оперций, напрмиер бек слэш энд) сокращение типового кода из 2 и более операций к одной.
вар переменная (только в участке кода работает, где ее вызвал)
лет глобальная переменная,

переменная универсальны обьект информации





интежер-цифра
стринг-строка
чар-если один символ(может быть и цифра)
цифра может быть символ (в ковычках это символ)
while - пока
=+ операторы

for
в переменной число 1,без ковычек. если мы сравним с стрингом, то будет тру ( по таблице ASCII)
либо строку сравнит с числом, либо с цифрой

в переменную могу положить массив(1, 2 , 3) или строку. nul может убрать один из этих элемнтов.
индексация начинается с 0
вар:числа
числа [0]+4
{} относится только к фунция 
функция-
надо приготовить еду
вщять яйца,смешать,вылить,пожарить
взмохнул палочкой и все сделалось само

else if хз где это я взял
if 
пример:
year=2013;
if (year < 2015) {
alert( 'Это слишком рано...' );
} else if (year > 2015) {
alert( 'Это поздновато' );
} else {
alert( 'Верно!' );
}

+ b +  записывает в строчку как число или строчку (то, чему равно b)

let a = symbol()

this
Ключевое слово this ссылается на контекст выполняемой функции.

function*
Ключевое слово function* (со звёздочкой) определяет функцию-генератор.

yield
Пауза или продолжение выполнения функции-генератора.
yield*
Делегирует выполнение другому генератору итерируемому объекту.

( )
Оператор группировки.

super
Ключевое слово super вызывает конструктор родительского класса.

void
Оператор void отбрасывает возвращаемое значение выражения.

**
Оператор возведения в степень.

<=
Оператор меньше или равно.
>=
Оператор больше или равно.

==
Оператор проверки на равенство.
!=
Оператор проверки на неравенство.
===
Оператор проверки на идентичность.
!==
Оператор проверки на неидентичность.

  =
Оператор присваивания.
*=
Оператор присваивания с умножением.
/=
Оператор присваивания с делением.
%=
Оператор присваивания с взятием остатка от деления.
+=
Оператор присваивания со сложением.
-=
Оператор присваивания с вычитанием.

функция:

function menyay(){
  car.color = 'red'
  console.log(car.color)
};
menyay(); // обязательно надо вызвать функцию


функция сложная
var car = {
  color: 'red',
};
var car2 = {
  color: 'green',
};

colorChange (car2);

function colorChange(theCar){
  theCar.color = 'yellow';
}
console.log("Car:" + car.color);
console.log("Car2:" + car2.color);

задача
2 числа (5 и 3) 
это стороны прямоугольника
вывод: максимальное количесвто квадратов, на которые можно разбить

задание, которое не выполнил:
var kvadrat ={
a = 5,
b = 3,
z = a - b;
arr = []

while(kvadrat.a != kvadrat.b)
{
  z = [a-b];
  a=b;
  b=z;
}
console.log('arr');

